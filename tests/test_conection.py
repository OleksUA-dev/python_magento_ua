#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Magento API.
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from magento_ua.settings import Settings
    from magento_ua.client import MagentoClient, SyncMagentoClient
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –ø—Ä–æ–µ–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: pip install -e .")
    sys.exit(1)


def check_env_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å .env —Ñ–∞–π–ª—É."""
    env_file = project_root / ".env"
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ Magento API")
        print("–ü—Ä–∏–∫–ª–∞–¥:")
        print("MAGENTO_BASE_URL=http://localhost:8080")
        print("MAGENTO_USERNAME=your_api_user")
        print("MAGENTO_PASSWORD=your_api_password")
        return False

    print("‚úÖ –§–∞–π–ª .env –∑–Ω–∞–π–¥–µ–Ω–æ")
    return True


def test_settings_loading():
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")

    try:
        settings = Settings.from_env()
        print(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:")
        print(f"   Base URL: {settings.base_url}")
        print(f"   Username: {settings.username}")
        print(f"   Verify SSL: {settings.verify_ssl}")
        print(f"   Timeout: {settings.timeout}")
        return settings
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        return None


async def test_async_client(settings):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç."""
    print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞...")

    try:
        async with MagentoClient(settings) as client:
            print("‚úÖ –ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ")

            # –¢–µ—Å—Ç health check
            health = await client.health_check()
            print(f"‚úÖ Health check: {health['client']}")

            # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
            headers = await client.get_auth_headers()
            print("‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ")

            # –¢–µ—Å—Ç API –∑–∞–ø–∏—Ç—É - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω
            try:
                response = await client.http_adapter.get(
                    "rest/V1/store/storeConfigs",
                    headers=headers
                )
                print("‚úÖ API –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π")
                print(f"   Store configs count: {len(response) if isinstance(response, list) else 'N/A'}")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è  API –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
                # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ—à–∏–π –∑–∞–ø–∏—Ç
                try:
                    response = await client.http_adapter.get(
                        "rest/V1/modules",
                        headers=headers
                    )
                    print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π API –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π")
                    return True
                except Exception as e2:
                    print(f"‚ùå –í—Å—ñ API –∑–∞–ø–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—å: {e2}")
                    return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º: {e}")
        return False


def test_sync_client(settings):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç."""
    print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞...")

    try:
        with SyncMagentoClient(settings) as client:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ")

            # –¢–µ—Å—Ç health check
            health = client.health_check()
            print(f"‚úÖ Health check: {health['client']}")

            return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º: {e}")
        return False


def test_direct_api_call(settings):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ API."""
    print("\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ API –≤–∏–∫–ª–∏–∫—É...")

    import httpx

    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω
        token_url = f"{settings.base_url}/rest/V1/integration/admin/token"
        auth_data = {
            "username": settings.username,
            "password": settings.password
        }

        with httpx.Client(verify=settings.verify_ssl, timeout=settings.timeout) as client:
            response = client.post(token_url, json=auth_data)

            if response.status_code == 200:
                token = response.json().strip('"')
                print("‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π API –≤–∏–∫–ª–∏–∫")

                # –°–ø—Ä–æ–±—É—î–º–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –∑ —Ç–æ–∫–µ–Ω–æ–º
                headers = {
                    "Authorization": f"Bearer {token}",
                    "Content-Type": "application/json"
                }

                test_url = f"{settings.base_url}/rest/V1/store/storeConfigs"
                test_response = client.get(test_url, headers=headers)

                if test_response.status_code == 200:
                    print("‚úÖ API –∑–∞–ø–∏—Ç –∑ —Ç–æ–∫–µ–Ω–æ–º —É—Å–ø—ñ—à–Ω–∏–π")
                    data = test_response.json()
                    print(f"   –û—Ç—Ä–∏–º–∞–Ω–æ store configs: {len(data) if isinstance(data, list) else 'N/A'}")
                    return True
                else:
                    print(f"‚ö†Ô∏è  API –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å {test_response.status_code}")
                    print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {test_response.text[:200]}...")
                    return False
            else:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}...")
                return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ API –≤–∏–∫–ª–∏–∫—É: {e}")
        return False


def print_troubleshooting():
    """–í–∏–≤–µ—Å—Ç–∏ –ø–æ—Ä–∞–¥–∏ –ø–æ —É—Å—É–Ω–µ–Ω–Ω—é –ø—Ä–æ–±–ª–µ–º."""
    print("\nüîß –ü–æ—Ä–∞–¥–∏ –ø–æ —É—Å—É–Ω–µ–Ω–Ω—é –ø—Ä–æ–±–ª–µ–º:")
    print("\n1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ Magento –∑–∞–ø—É—â–µ–Ω–æ:")
    print("   docker ps")
    print("   curl http://localhost:8080")

    print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Magento Admin:")
    print("   System ‚Üí Extensions ‚Üí Integrations")
    print("   –ê–±–æ System ‚Üí Permissions ‚Üí All Users")

    print("\n3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ .env —Ñ–∞–π–ª—ñ:")
    print("   MAGENTO_BASE_URL –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –≤–∞—à—ñ–π Magento")
    print("   MAGENTO_USERNAME/PASSWORD –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ")

    print("\n4. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏:")
    print("   MAGENTO_VERIFY_SSL=false")
    print("   MAGENTO_TIMEOUT=30")

    print("\n5. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è:")
    print("   MAGENTO_LOG_LEVEL=DEBUG")
    print("   MAGENTO_ENABLE_REQUEST_LOGGING=true")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Magento API")
    print("=" * 50)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
    if not check_env_file():
        return 1

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    settings = test_settings_loading()
    if not settings:
        return 1

    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ API –≤–∏–∫–ª–∏–∫—É
    direct_api_success = test_direct_api_call(settings)

    if direct_api_success:
        print("\n‚úÖ –ü—Ä—è–º–µ API –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î!")

        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        async_success = await test_async_client(settings)
        sync_success = test_sync_client(settings)

        if async_success and sync_success:
            print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
            print("–í–∞—à Magento API –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ Python –∫–ª—ñ—î–Ω—Ç–æ–º.")
            return 0
        else:
            print("\n‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏, –∞–ª–µ –±–∞–∑–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î.")
            return 0
    else:
        print("\n‚ùå –ë–∞–∑–æ–≤–µ API –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î.")
        print_troubleshooting()
        return 1


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(result)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)